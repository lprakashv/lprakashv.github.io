<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on LPRAKASHV TECH BLOG</title><link>https://www.lprakashv.com/posts/</link><description>Recent content in Posts on LPRAKASHV TECH BLOG</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>¬© Lalit Prakash Vatsal</copyright><lastBuildDate>Sun, 14 Aug 2022 16:06:48 +0530</lastBuildDate><atom:link href="https://www.lprakashv.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Create Your Own Blog With Hugo and Github Pages</title><link>https://www.lprakashv.com/posts/2022-08-14_create-your-own-blog-with-hugo-and-github-pages/</link><pubDate>Sun, 14 Aug 2022 16:06:48 +0530</pubDate><guid>https://www.lprakashv.com/posts/2022-08-14_create-your-own-blog-with-hugo-and-github-pages/</guid><description>In this post we will explore how we can setup our own blog using Hugo which claims to be &amp;ldquo;The world‚Äôs fastest framework for building websites&amp;rdquo;. And for hosting, we will use Github pages and automatic deployments using Github Actions workflow.
So let&amp;rsquo;s get started, shall we?
The Github.io Repository If you have a Github.com account, you can create your personal static website easily by creating a special repository with name &amp;quot;&amp;lt;your-github-user-name&amp;gt;.</description></item><item><title>Better Switch-Case for Java!</title><link>https://www.lprakashv.com/posts/2021-05-25_better-switchcase-for-java/</link><pubDate>Tue, 25 May 2021 11:30:29 +0000</pubDate><guid>https://www.lprakashv.com/posts/2021-05-25_better-switchcase-for-java/</guid><description>Let‚Äôs start with the question, what is wrong with the switch-case anyway? Here‚Äôs a simple example of a switch-case in Java:
Can you see the problem here? It is the unnecessary ‚Äúceremony‚Äù of writing the ‚Äúbreak‚Äù statement on each case!
You can argue that we can just return after each case-block, while this is a brilliant idea but, then the ceremony would be of writing ‚Äúreturn‚Äù in each block üòú you can even miss that!</description></item><item><title>Bulk RDBMS Upserts with Spring</title><link>https://www.lprakashv.com/posts/2020-08-28_bulk-rdbms-upserts-with-spring/</link><pubDate>Fri, 28 Aug 2020 21:08:07 +0000</pubDate><guid>https://www.lprakashv.com/posts/2020-08-28_bulk-rdbms-upserts-with-spring/</guid><description>Upsert is a fairly common terminology in databases, meaning Update if the record exists or Insert the new record. Upserts make more sense in case of simple object save requests with new information.
Why Bulk? If we talk about any data sync, data migration or bulk data update jobs, we are bound to have a bulk upsert scenario to update whatever we have in the database and insert all the new rows.</description></item><item><title>Going Reactive!</title><link>https://www.lprakashv.com/posts/2020-04-16_going-reactive/</link><pubDate>Thu, 16 Apr 2020 10:47:47 +0000</pubDate><guid>https://www.lprakashv.com/posts/2020-04-16_going-reactive/</guid><description>Logo courtesy: http://reactivex.io/
There is a lot of hype around this shiny new thing in web applications development world called being ‚ÄúReactive‚Äù! There are many frameworks popping up with this slogan, e.g., Vert.x, Akka, Spring Webflux, Play, RxJava, RxJS etc. to name a few. What does it mean? and why is this hype? is it worth your time? Let‚Äôs explore‚Ä¶
What does Reactive mean exactly? Being reactive means ability to ‚Äúreact‚Äù to ‚Äúevents/changes‚Äù.</description></item><item><title>Akka Streams in Java Spring Boot!</title><link>https://www.lprakashv.com/posts/2020-04-12_akka-streams-in-java-spring-boot/</link><pubDate>Sun, 12 Apr 2020 10:45:58 +0000</pubDate><guid>https://www.lprakashv.com/posts/2020-04-12_akka-streams-in-java-spring-boot/</guid><description>Streaming data from a Source to Sink is a very trivial task in today‚Äôs data processing and data pipelining systems. Ergo, there are many streaming solutions out there like: Kafka Stream, Spark Streaming, Apache Flink etc.
All of them in one way or another either need an infrastructure to be setup to be able to fully take advantage of them (e.g., HDFS, Spark cluster, Kafka streaming setup etc.) or we need some kind of orchestration among the streaming jobs (e.</description></item><item><title>Handling Nulls in nested objects (Java)</title><link>https://www.lprakashv.com/posts/2020-03-29_handling-nulls-in-nested-objects-java/</link><pubDate>Sun, 29 Mar 2020 09:14:32 +0000</pubDate><guid>https://www.lprakashv.com/posts/2020-03-29_handling-nulls-in-nested-objects-java/</guid><description>Handling NullPointerException and keeping track of all the nullable values has always been a pain for Java developers.
This is even worse when you are working with deeply nested objects and handling all the null values grows exponentially with each nullable nested value. This is visible by all the statements like:
if (x.y().z().. != null) {‚Ä¶} In this article, we will explore some of the techniques starting with the naive approach to a more advanced one for handling such scenarios.</description></item><item><title>Circuit Breaker pattern in Scala</title><link>https://www.lprakashv.com/posts/2020-03-28_circuit-breaker-pattern-in-scala/</link><pubDate>Sat, 28 Mar 2020 20:30:28 +0000</pubDate><guid>https://www.lprakashv.com/posts/2020-03-28_circuit-breaker-pattern-in-scala/</guid><description>Circuit breaker pattern is a common microservice resiliency pattern to make system responsive after series of failures and have a fallback mechanism.
[NOTE] Spoiler‚Ää‚Äî‚ÄäThis would be a simple implementation and the Scala code would be stateful and have side-effects.
The Need Doing a remote call or executing a task which is outside the domain boundary of the system is very common in modern applications. Especially in microservice world, we are bound to make calls to other microservices.</description></item><item><title>How to keep your sanity working with Scala Implicit!</title><link>https://www.lprakashv.com/posts/2019-10-17_how-to-keep-your-sanity-working-with-scala-implicit/</link><pubDate>Thu, 17 Oct 2019 08:14:10 +0000</pubDate><guid>https://www.lprakashv.com/posts/2019-10-17_how-to-keep-your-sanity-working-with-scala-implicit/</guid><description>Courtesy: https://www.pexels.com/
Intro Scala Implicits provide a lot of power and flexibility to express the code in such beautiful ways that development sometimes feel like and art and are nothing short of a ‚ÄúBrahmastra‚Äù in the hand of a library developer.
And, as Spider-man‚Äôs uncle said,
‚ÄúWith great power, comes greater responsibility!‚Äù
The abuse of such a powerful feature has made working with them a nightmare sometimes for the end users.</description></item><item><title>Making ordinary classes Rich! (Scala)</title><link>https://www.lprakashv.com/posts/2019-10-07_making-ordinary-classes-rich-scala/</link><pubDate>Mon, 07 Oct 2019 17:24:21 +0000</pubDate><guid>https://www.lprakashv.com/posts/2019-10-07_making-ordinary-classes-rich-scala/</guid><description>Let me break it to you, this post has nothing to do with charity! Now, let‚Äôs start with a question:
How do we enrich something?
By making it abundant, rich in features and resourceful!
In simple OOP terms, we add additional feature methods to the class!!
Let‚Äôs try to enrich a Person class, starting with the basic class:
Now, to make a person speak French, we have to add another method to our Person class:</description></item><item><title>Cushing Design Patterns!‚Ää‚Äî‚ÄäUnnecessary Patterns.</title><link>https://www.lprakashv.com/posts/2019-09-30_cushing-design-patternsunnecessary-patterns./</link><pubDate>Mon, 30 Sep 2019 05:16:43 +0000</pubDate><guid>https://www.lprakashv.com/posts/2019-09-30_cushing-design-patternsunnecessary-patterns./</guid><description>This is the part-II in the continuation of the ‚ÄúCrushing Design Patterns‚Äù series (Part-I) where we debunk the idea of having to use the design patterns to design the system.
Intro They are either just so natural that we have been using them unconsciously or there are better ways in which we don‚Äôt have to focus on ceremoniously writing them.Here we go.
1. Builder Pattern The intent of the Builder design pattern is to separate the construction of a complex object from its representation.</description></item><item><title>Crushing Design Patterns with Scala!‚Ää‚Äî‚ÄäChain of responsibility</title><link>https://www.lprakashv.com/posts/2019-09-26_crushing-design-patterns-with-scalachain-of-responsibility/</link><pubDate>Thu, 26 Sep 2019 06:06:23 +0000</pubDate><guid>https://www.lprakashv.com/posts/2019-09-26_crushing-design-patterns-with-scalachain-of-responsibility/</guid><description>Starting this chain of responsibility of debunking the idea of really needing to use theDesign Patterns!. I believe that design patterns were created to standardise the OO patterns needed to solve the common problems arising due to not having a standard way of solving them using the programming language itself.
Design patterns should be used only as communication tool and not the way we have been using as a design tool.</description></item></channel></rss>