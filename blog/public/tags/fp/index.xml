<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FP on LPRAKASHV TECH BLOG</title>
    <link>http://www.lprakashv.com/tags/fp/</link>
    <description>Recent content in FP on LPRAKASHV TECH BLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Lalit Prakash Vatsal</copyright>
    <lastBuildDate>Tue, 25 May 2021 11:30:29 +0000</lastBuildDate><atom:link href="http://www.lprakashv.com/tags/fp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Better Switch-Case for Java!</title>
      <link>http://www.lprakashv.com/posts/2021-05-25_better-switchcase-for-java/</link>
      <pubDate>Tue, 25 May 2021 11:30:29 +0000</pubDate>
      
      <guid>http://www.lprakashv.com/posts/2021-05-25_better-switchcase-for-java/</guid>
      <description>Let’s start with the question, what is wrong with the switch-case anyway? Here’s a simple example of a switch-case in Java:
Can you see the problem here? It is the unnecessary “ceremony” of writing the “break” statement on each case!
You can argue that we can just return after each case-block, while this is a brilliant idea but, then the ceremony would be of writing “return” in each block 😜 you can even miss that!</description>
    </item>
    
    <item>
      <title>Cushing Design Patterns! — Unnecessary Patterns.</title>
      <link>http://www.lprakashv.com/posts/2019-09-30_cushing-design-patternsunnecessary-patterns./</link>
      <pubDate>Mon, 30 Sep 2019 05:16:43 +0000</pubDate>
      
      <guid>http://www.lprakashv.com/posts/2019-09-30_cushing-design-patternsunnecessary-patterns./</guid>
      <description>This is the part-II in the continuation of the “Crushing Design Patterns” series (Part-I) where we debunk the idea of having to use the design patterns to design the system.
Intro They are either just so natural that we have been using them unconsciously or there are better ways in which we don’t have to focus on ceremoniously writing them.Here we go.
1. Builder Pattern The intent of the Builder design pattern is to separate the construction of a complex object from its representation.</description>
    </item>
    
  </channel>
</rss>
