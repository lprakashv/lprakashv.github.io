<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>design patterns on LPRAKASHV CODE BYTES</title><link>https://www.lprakashv.com/tags/design-patterns/</link><description>Recent content in design patterns on LPRAKASHV CODE BYTES</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© Lalit Prakash Vatsal</copyright><lastBuildDate>Mon, 30 Sep 2019 05:16:43 +0000</lastBuildDate><atom:link href="https://www.lprakashv.com/tags/design-patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>Cushing Design Patterns! — Unnecessary Patterns.</title><link>https://www.lprakashv.com/posts/2019-09-30_cushing-design-patternsunnecessary-patterns./</link><pubDate>Mon, 30 Sep 2019 05:16:43 +0000</pubDate><guid>https://www.lprakashv.com/posts/2019-09-30_cushing-design-patternsunnecessary-patterns./</guid><description>This is the part-II in the continuation of the “Crushing Design Patterns” series (Part-I) where we debunk the idea of having to use the design patterns to design the system.
Intro They are either just so natural that we have been using them unconsciously or there are better ways in which we don’t have to focus on ceremoniously writing them.Here we go.
1. Builder Pattern The intent of the Builder design pattern is to separate the construction of a complex object from its representation.</description></item><item><title>Crushing Design Patterns with Scala! — Chain of responsibility</title><link>https://www.lprakashv.com/posts/2019-09-26_crushing-design-patterns-with-scalachain-of-responsibility/</link><pubDate>Thu, 26 Sep 2019 06:06:23 +0000</pubDate><guid>https://www.lprakashv.com/posts/2019-09-26_crushing-design-patterns-with-scalachain-of-responsibility/</guid><description>Starting this chain of responsibility of debunking the idea of really needing to use theDesign Patterns!. I believe that design patterns were created to standardise the OO patterns needed to solve the common problems arising due to not having a standard way of solving them using the programming language itself.
Design patterns should be used only as communication tool and not the way we have been using as a design tool.</description></item></channel></rss>