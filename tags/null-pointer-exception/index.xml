<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>null pointer exception on LPRAKASHV TECH BLOG</title><link>http://www.lprakashv.com/tags/null-pointer-exception/</link><description>Recent content in null pointer exception on LPRAKASHV TECH BLOG</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© Lalit Prakash Vatsal</copyright><lastBuildDate>Sun, 29 Mar 2020 09:14:32 +0000</lastBuildDate><atom:link href="http://www.lprakashv.com/tags/null-pointer-exception/index.xml" rel="self" type="application/rss+xml"/><item><title>Handling Nulls in nested objects (Java)</title><link>http://www.lprakashv.com/posts/2020-03-29_handling-nulls-in-nested-objects-java/</link><pubDate>Sun, 29 Mar 2020 09:14:32 +0000</pubDate><guid>http://www.lprakashv.com/posts/2020-03-29_handling-nulls-in-nested-objects-java/</guid><description>Handling NullPointerException and keeping track of all the nullable values has always been a pain for Java developers.
This is even worse when you are working with deeply nested objects and handling all the null values grows exponentially with each nullable nested value. This is visible by all the statements like:
if (x.y().z().. != null) {…} In this article, we will explore some of the techniques starting with the naive approach to a more advanced one for handling such scenarios.</description></item></channel></rss>