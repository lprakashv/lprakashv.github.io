<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>circuit breaker pattern on LPRAKASHV CODE BYTES</title><link>https://www.lprakashv.com/tags/circuit-breaker-pattern/</link><description>Recent content in circuit breaker pattern on LPRAKASHV CODE BYTES</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© Lalit Prakash Vatsal</copyright><lastBuildDate>Sat, 28 Mar 2020 20:30:28 +0000</lastBuildDate><atom:link href="https://www.lprakashv.com/tags/circuit-breaker-pattern/index.xml" rel="self" type="application/rss+xml"/><item><title>Circuit Breaker pattern in Scala</title><link>https://www.lprakashv.com/posts/2020-03-28_circuit-breaker-pattern-in-scala/</link><pubDate>Sat, 28 Mar 2020 20:30:28 +0000</pubDate><guid>https://www.lprakashv.com/posts/2020-03-28_circuit-breaker-pattern-in-scala/</guid><description>Circuit breaker pattern is a common microservice resiliency pattern to make system responsive after series of failures and have a fallback mechanism.
[NOTE] Spoiler — This would be a simple implementation and the Scala code would be stateful and have side-effects.
The Need Doing a remote call or executing a task which is outside the domain boundary of the system is very common in modern applications. Especially in microservice world, we are bound to make calls to other microservices.</description></item></channel></rss>