<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>scala on LPRAKASHV TECH BLOG</title><link>https://www.lprakashv.com/tags/scala/</link><description>Recent content in scala on LPRAKASHV TECH BLOG</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© Lalit Prakash Vatsal</copyright><lastBuildDate>Sat, 28 Mar 2020 20:30:28 +0000</lastBuildDate><atom:link href="https://www.lprakashv.com/tags/scala/index.xml" rel="self" type="application/rss+xml"/><item><title>Circuit Breaker pattern in Scala</title><link>https://www.lprakashv.com/posts/2020-03-28_circuit-breaker-pattern-in-scala/</link><pubDate>Sat, 28 Mar 2020 20:30:28 +0000</pubDate><guid>https://www.lprakashv.com/posts/2020-03-28_circuit-breaker-pattern-in-scala/</guid><description>Circuit breaker pattern is a common microservice resiliency pattern to make system responsive after series of failures and have a fallback mechanism.
[NOTE] Spoiler — This would be a simple implementation and the Scala code would be stateful and have side-effects.
The Need Doing a remote call or executing a task which is outside the domain boundary of the system is very common in modern applications. Especially in microservice world, we are bound to make calls to other microservices.</description></item><item><title>How to keep your sanity working with Scala Implicit!</title><link>https://www.lprakashv.com/posts/2019-10-17_how-to-keep-your-sanity-working-with-scala-implicit/</link><pubDate>Thu, 17 Oct 2019 08:14:10 +0000</pubDate><guid>https://www.lprakashv.com/posts/2019-10-17_how-to-keep-your-sanity-working-with-scala-implicit/</guid><description>Courtesy: https://www.pexels.com/
Intro Scala Implicits provide a lot of power and flexibility to express the code in such beautiful ways that development sometimes feel like and art and are nothing short of a “Brahmastra” in the hand of a library developer.
And, as Spider-man’s uncle said,
“With great power, comes greater responsibility!”
The abuse of such a powerful feature has made working with them a nightmare sometimes for the end users.</description></item><item><title>Making ordinary classes Rich! (Scala)</title><link>https://www.lprakashv.com/posts/2019-10-07_making-ordinary-classes-rich-scala/</link><pubDate>Mon, 07 Oct 2019 17:24:21 +0000</pubDate><guid>https://www.lprakashv.com/posts/2019-10-07_making-ordinary-classes-rich-scala/</guid><description>Let me break it to you, this post has nothing to do with charity! Now, let’s start with a question:
How do we enrich something?
By making it abundant, rich in features and resourceful!
In simple OOP terms, we add additional feature methods to the class!!
Let’s try to enrich a Person class, starting with the basic class:
Now, to make a person speak French, we have to add another method to our Person class:</description></item><item><title>Cushing Design Patterns! — Unnecessary Patterns.</title><link>https://www.lprakashv.com/posts/2019-09-30_cushing-design-patternsunnecessary-patterns./</link><pubDate>Mon, 30 Sep 2019 05:16:43 +0000</pubDate><guid>https://www.lprakashv.com/posts/2019-09-30_cushing-design-patternsunnecessary-patterns./</guid><description>This is the part-II in the continuation of the “Crushing Design Patterns” series (Part-I) where we debunk the idea of having to use the design patterns to design the system.
Intro They are either just so natural that we have been using them unconsciously or there are better ways in which we don’t have to focus on ceremoniously writing them.Here we go.
1. Builder Pattern The intent of the Builder design pattern is to separate the construction of a complex object from its representation.</description></item><item><title>Crushing Design Patterns with Scala! — Chain of responsibility</title><link>https://www.lprakashv.com/posts/2019-09-26_crushing-design-patterns-with-scalachain-of-responsibility/</link><pubDate>Thu, 26 Sep 2019 06:06:23 +0000</pubDate><guid>https://www.lprakashv.com/posts/2019-09-26_crushing-design-patterns-with-scalachain-of-responsibility/</guid><description>Starting this chain of responsibility of debunking the idea of really needing to use theDesign Patterns!. I believe that design patterns were created to standardise the OO patterns needed to solve the common problems arising due to not having a standard way of solving them using the programming language itself.
Design patterns should be used only as communication tool and not the way we have been using as a design tool.</description></item></channel></rss>