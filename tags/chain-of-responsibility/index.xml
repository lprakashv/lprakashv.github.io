<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>chain of responsibility on LPRAKASHV TECH BLOG</title><link>https://www.lprakashv.com/tags/chain-of-responsibility/</link><description>Recent content in chain of responsibility on LPRAKASHV TECH BLOG</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© Lalit Prakash Vatsal</copyright><lastBuildDate>Thu, 26 Sep 2019 06:06:23 +0000</lastBuildDate><atom:link href="https://www.lprakashv.com/tags/chain-of-responsibility/index.xml" rel="self" type="application/rss+xml"/><item><title>Crushing Design Patterns with Scala! — Chain of responsibility</title><link>https://www.lprakashv.com/posts/2019-09-26_crushing-design-patterns-with-scalachain-of-responsibility/</link><pubDate>Thu, 26 Sep 2019 06:06:23 +0000</pubDate><guid>https://www.lprakashv.com/posts/2019-09-26_crushing-design-patterns-with-scalachain-of-responsibility/</guid><description>Starting this chain of responsibility of debunking the idea of really needing to use theDesign Patterns!. I believe that design patterns were created to standardise the OO patterns needed to solve the common problems arising due to not having a standard way of solving them using the programming language itself.
Design patterns should be used only as communication tool and not the way we have been using as a design tool.</description></item></channel></rss>