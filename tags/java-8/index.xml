<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>java 8 on LPRAKASHV CODE BYTES</title><link>https://www.lprakashv.com/tags/java-8/</link><description>Recent content in java 8 on LPRAKASHV CODE BYTES</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© Lalit Prakash Vatsal</copyright><lastBuildDate>Fri, 28 Aug 2020 21:08:07 +0000</lastBuildDate><atom:link href="https://www.lprakashv.com/tags/java-8/index.xml" rel="self" type="application/rss+xml"/><item><title>Bulk RDBMS Upserts with Spring</title><link>https://www.lprakashv.com/posts/2020-08-28_bulk-rdbms-upserts-with-spring/</link><pubDate>Fri, 28 Aug 2020 21:08:07 +0000</pubDate><guid>https://www.lprakashv.com/posts/2020-08-28_bulk-rdbms-upserts-with-spring/</guid><description>Upsert is a fairly common terminology in databases, meaning Update if the record exists or Insert the new record. Upserts make more sense in case of simple object save requests with new information.
Why Bulk? If we talk about any data sync, data migration or bulk data update jobs, we are bound to have a bulk upsert scenario to update whatever we have in the database and insert all the new rows.</description></item><item><title>Handling Nulls in nested objects (Java)</title><link>https://www.lprakashv.com/posts/2020-03-29_handling-nulls-in-nested-objects-java/</link><pubDate>Sun, 29 Mar 2020 09:14:32 +0000</pubDate><guid>https://www.lprakashv.com/posts/2020-03-29_handling-nulls-in-nested-objects-java/</guid><description>Handling NullPointerException and keeping track of all the nullable values has always been a pain for Java developers.
This is even worse when you are working with deeply nested objects and handling all the null values grows exponentially with each nullable nested value. This is visible by all the statements like:
if (x.y().z().. != null) {…} In this article, we will explore some of the techniques starting with the naive approach to a more advanced one for handling such scenarios.</description></item></channel></rss>